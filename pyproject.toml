[project]
name = "dirstat-pro"
version = "0.1.0"
description = "A powerful CLI tool for directory analysis, storage optimization, and metadata management"
authors = [
    {name = "Maverick D. Aece", email = "aece.d.maverick@gmail.com"},
]
requires-python = ">=3.8"
readme = "README.md"
license = {text = "MIT"}
keywords = ["directory", "analysis", "storage", "optimization", "metadata"]
dependencies = [
    "click>=8.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "humanize>=4.0.0",
    "gitpython>=3.1.0",
    "jinja2>=3.0.0",
    "markdown2>=2.4.0",
    "toml>=0.10.0",
    "pyyaml>=6.0.0",
    "requests>=2.31.0",
    "joblib>=1.3.0",
    "diskcache>=5.0.0",
    "watchdog>=3.0.0",
    "pathspec==0.12.1",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Filesystems",
    "Topic :: Utilities",
]

[project.urls]
Homepage = "https://github.com/Maverick-D-Aece/dirstat-pro"
Repository = "https://github.com/Maverick-D-Aece/dirstat-pro.git"
Documentation = "https://github.com/Maverick-D-Aece/dirstat-pro#readme"
"Bug Tracker" = "https://github.com/Maverick-D-Aece/dirstat-pro/issues"

[project.scripts]
dirstat = "folder_summary.cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["folder_summary"]

[tool.ruff]
target-version = "py38"
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "B", "I"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]

[tool.coverage.run]
source = ["folder_summary"]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_empty = true

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = false
warn_unreachable = true
strict_optional = true